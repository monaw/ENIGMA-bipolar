<?php

/**
 * Copyright 2017 by Eyler Lab @ UCSD (http://www.bipolar-aging.com)
 *
 * This module contains functions to support the aging analysis gateway
 *
 * Author: Mona Wong
 **/

module_load_include ( 'inc', 'node', 'node.pages' );


// Our CSS has to be added this way to overwrite settings from the theme
drupal_add_css ( drupal_get_path ( 'module', 'ebd') . '/ebd.css',
    array ( 'group' => CSS_THEME, 'weight' => 1000, 'every_page' => FALSE ) );


// Global variables

global $EBD_AGREEMENT_STATUS_NO;
$EBD_AGREEMENT_STATUS_NO = 2;

global $EBD_AGREEMENT_STATUS_OK;
$EBD_AGREEMENT_STATUS_OK = 1;

global $EBD_AGREEMENT_STATUS_REDO;
$EBD_AGREEMENT_STATUS_REDO = 3;

global $EBD_BLANK_PAGE;
$EBD_BLANK_PAGE = "node/14";

global $EBD_COMBINE_FILENAME;
$EBD_COMBINE_FILENAME = "combined.csv";

global $EBD_DATA_ADMIN_ROLE_ID;
$EBD_DATA_ADMIN_ROLE_ID = '5';

global $EBD_DEBUG_FILE;
$EBD_DEBUG_FILE = "/tmp/debug.txt";

global $EBD_HEADER_PI_NAME;
$EBD_HEADER_PI_NAME = "PI Name";

global $EBD_HEADERS_COVARIATES;
//$EBD_HEADERS_COVARIATES = array ( "SubjID", "Dx", "Age", "Sex", "FullDx" );
$EBD_HEADERS_COVARIATES = array ( "SubjID", "Dx", "Age", "Sex" );

global $EBD_HEADERS_LRVOLUMES;
$EBD_HEADERS_LRVOLUMES = array ( "SubjID", "LLatVent", "RLatVent", "Lthal",
    "Rthal", "Lcaud", "Rcaud", "Lput", "Rput", "Lpal", "Rpal", "Lhippo",
    "Rhippo", "Lamyg", "Ramyg", "Laccumb", "Raccumb", "ICV" );

global $EBD_HEADERS_SURFAVG;
$EBD_HEADERS_SURFAVG = array ( "SubjID", "L_bankssts_surfavg",
    "L_caudalanteriorcingulate_surfavg", "L_caudalmiddlefrontal_surfavg",
    "L_cuneus_surfavg", "L_entorhinal_surfavg", "L_fusiform_surfavg",
    "L_inferiorparietal_surfavg", "L_inferiortemporal_surfavg",
    "L_isthmuscingulate_surfavg", "L_lateraloccipital_surfavg",
    "L_lateralorbitofrontal_surfavg", "L_lingual_surfavg",
    "L_medialorbitofrontal_surfavg", "L_middletemporal_surfavg",
    "L_parahippocampal_surfavg", "L_paracentral_surfavg",
    "L_parsopercularis_surfavg", "L_parsorbitalis_surfavg",
    "L_parstriangularis_surfavg", "L_pericalcarine_surfavg",
    "L_postcentral_surfavg", "L_posteriorcingulate_surfavg",
    "L_precentral_surfavg", "L_precuneus_surfavg",
    "L_rostralanteriorcingulate_surfavg", "L_rostralmiddlefrontal_surfavg",
    "L_superiorfrontal_surfavg", "L_superiorparietal_surfavg",
    "L_superiortemporal_surfavg", "L_supramarginal_surfavg",
    "L_frontalpole_surfavg", "L_temporalpole_surfavg",
    "L_transversetemporal_surfavg", "L_insula_surfavg",
    "R_bankssts_surfavg", "R_caudalanteriorcingulate_surfavg",
    "R_caudalmiddlefrontal_surfavg", "R_cuneus_surfavg",
    "R_entorhinal_surfavg", "R_fusiform_surfavg", "R_inferiorparietal_surfavg",
    "R_inferiortemporal_surfavg", "R_isthmuscingulate_surfavg",
    "R_lateraloccipital_surfavg", "R_lateralorbitofrontal_surfavg",
    "R_lingual_surfavg", "R_medialorbitofrontal_surfavg",
    "R_middletemporal_surfavg", "R_parahippocampal_surfavg",
    "R_paracentral_surfavg", "R_parsopercularis_surfavg",
    "R_parsorbitalis_surfavg", "R_parstriangularis_surfavg",
    "R_pericalcarine_surfavg", "R_postcentral_surfavg",
    "R_posteriorcingulate_surfavg", "R_precentral_surfavg",
    "R_precuneus_surfavg", "R_rostralanteriorcingulate_surfavg",
    "R_rostralmiddlefrontal_surfavg", "R_superiorfrontal_surfavg",
    "R_superiorparietal_surfavg", "R_superiortemporal_surfavg",
    "R_supramarginal_surfavg", "R_frontalpole_surfavg",
    "R_temporalpole_surfavg", "R_transversetemporal_surfavg",
    "R_insula_surfavg", "LThickness", "RThickness", "LSurfArea", "RSurfArea",
    "ICV" );

global $EBD_HEADERS_THICKAVG;
$EBD_HEADERS_THICKAVG = array ( "SubjID", "L_bankssts_thickavg",
    "L_caudalanteriorcingulate_thickavg", "L_caudalmiddlefrontal_thickavg",
    "L_cuneus_thickavg", "L_entorhinal_thickavg", "L_fusiform_thickavg",
    "L_inferiorparietal_thickavg", "L_inferiortemporal_thickavg",
    "L_isthmuscingulate_thickavg", "L_lateraloccipital_thickavg",
    "L_lateralorbitofrontal_thickavg", "L_lingual_thickavg",
    "L_medialorbitofrontal_thickavg", "L_middletemporal_thickavg",
    "L_parahippocampal_thickavg", "L_paracentral_thickavg",
    "L_parsopercularis_thickavg", "L_parsorbitalis_thickavg",
    "L_parstriangularis_thickavg", "L_pericalcarine_thickavg",
    "L_postcentral_thickavg", "L_posteriorcingulate_thickavg",
    "L_precentral_thickavg", "L_precuneus_thickavg",
    "L_rostralanteriorcingulate_thickavg", "L_rostralmiddlefrontal_thickavg",
    "L_superiorfrontal_thickavg", "L_superiorparietal_thickavg",
    "L_superiortemporal_thickavg", "L_supramarginal_thickavg",
    "L_frontalpole_thickavg", "L_temporalpole_thickavg",
    "L_transversetemporal_thickavg", "L_insula_thickavg", "R_bankssts_thickavg",
    "R_caudalanteriorcingulate_thickavg", "R_caudalmiddlefrontal_thickavg",
    "R_cuneus_thickavg", "R_entorhinal_thickavg", "R_fusiform_thickavg",
    "R_inferiorparietal_thickavg", "R_inferiortemporal_thickavg",
    "R_isthmuscingulate_thickavg", "R_lateraloccipital_thickavg",
    "R_lateralorbitofrontal_thickavg", "R_lingual_thickavg",
    "R_medialorbitofrontal_thickavg", "R_middletemporal_thickavg",
    "R_parahippocampal_thickavg", "R_paracentral_thickavg",
    "R_parsopercularis_thickavg", "R_parsorbitalis_thickavg",
    "R_parstriangularis_thickavg", "R_pericalcarine_thickavg",
    "R_postcentral_thickavg", "R_posteriorcingulate_thickavg",
    "R_precentral_thickavg", "R_precuneus_thickavg",
    "R_rostralanteriorcingulate_thickavg", "R_rostralmiddlefrontal_thickavg",
    "R_superiorfrontal_thickavg", "R_superiorparietal_thickavg",
    "R_superiortemporal_thickavg", "R_supramarginal_thickavg",
    "R_frontalpole_thickavg", "R_temporalpole_thickavg",
    "R_transversetemporal_thickavg", "R_insula_thickavg", "LThickness",
    "RThickness", "LSurfArea", "RSurfArea", "ICV" );

global $EBD_LOGOUT_URL;
$EBD_LOGOUT_URL = "user/logout";

global $EBD_MASTER_FILENAME;
$EBD_MASTER_FILENAME = "masterfile.csv";

global $EBD_PRIVATE_URI_PREFIX;
$EBD_PRIVATE_URI_PREFIX = "private://csv/";

global $EBD_UPLOAD_INFO;
$EBD_UPLOAD_INFO = "ebd_upload_info";

global $EBD_UPLOAD_NEXT_BUTTON;
$EBD_UPLOAD_NEXT_BUTTON = "Next -->";

global $EBD_UPLOAD_PREVIOUS_BUTTON;
$EBD_UPLOAD_PREVIOUS_BUTTON = "<-- Previous";

global $EBD_UPLOAD_PROCEED_BUTTON;
$EBD_UPLOAD_PROCEED_BUTTON = "Proceed with upload anyway -->";

global $EBD_UPLOAD_STEPS;
$EBD_UPLOAD_STEPS = array ( 1 => "covariates", 2 => "SurfAvg", 3 => "ThickAvg",
    4 => "volumes", 5 => "save" );

global $EBD_UPLOAD_URL;
$EBD_UPLOAD_URL = "upload";


/**
 * Generate the age data for the given upload node by reading the covariates
 * file and counting number of entries per age
 **/
function ebd_age_data_generate ( $node )
{
    global $user;
    global $EBD_COMBINE_FILENAME;
    global $EBD_DEBUG_FILE;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_age_data_generate\n" );
    //fwrite ( $debug, "node : " . print_r ( $node, TRUE ) . "\n" );

    if ( empty ( $node->field_upload_covariates_file ) )
    {
        drupal_set_message ( "ERROR : missing coviates file for PI " .
            $node->title, 'error' );
        drupal_goto ( "uploads-list" );
    }

    $file = $node->field_upload_covariates_file[LANGUAGE_NONE][0]['uri'];
    //fwrite ( $debug, "file : " . print_r ( $file, TRUE ) . "\n" );
    $pi = $node->title;
    //fwrite ( $debug, "pi : " . print_r ( $pi, TRUE ) . "\n" );

    // Following setting is needed in case the file came from a PC which
    // results in newline problem
    ini_set ( 'auto_detect_line_endings', TRUE );
    $file_handle = fopen ( $file, "r" );

    // First, check header
    $age_index = -1;
    $gender_index = -1;
    $headers = fgetcsv ( $file_handle, 0, "," );
    //fwrite ( $debug, "headers : " . print_r ( $headers, TRUE ) . "\n" );

    foreach ( $headers as $index => $header )
    {
        //fwrite ( $debug, "index : " . print_r ( $index, TRUE ) . "\n" );
        //fwrite ( $debug, "header : " . print_r ( $header, TRUE ) . "\n" );

        if ( strcasecmp ( $header, "Age" ) === 0 )
            $age_index = $index;
        else if ( strcasecmp ( $header, "Sex" ) === 0 )
            $gender_index = $index;
    }
    //fwrite ( $debug, "age_index : " . print_r ( $age_index, TRUE ) . "\n" );
    //fwrite ( $debug, "gender_index : " . print_r ( $gender_index, TRUE ) . "\n" );

    $data = array();

    // Now check and save each line...
    while ( ( $line = fgetcsv ( $file_handle, 0, "," ) ) != FALSE )
    {
        //fwrite ( $debug, "line : " . print_r ( $line, TRUE ) . "\n" );

        $age = round ( $line[$age_index] );
        $gender = $line[$gender_index];

        if ( empty ( $data[$age] ) )
            $data[$age] = array ( "M" => 0, "F" => 0 );

        if ( $gender == '1' )
            $data[$age]['M'] += 1;
        else if ( $gender == '2' )
            $data[$age]['F']++;
    }
    //fwrite ( $debug, "data : " . print_r ( $data, TRUE ) . "\n" );

    foreach ( $data as $age => $genders )
    {
        $new_node = new stdClass();
        $new_node->type = "age";
        $new_node->title = $pi;
        $new_node->is_new = TRUE;
        $new_node->uid = $user->uid;
        $new_node->status = 1;
        $new_node->field_age_age = ebd_value_field_create ( $age );
        $new_node->field_age_females = ebd_value_field_create ( $genders['F'] );
        $new_node->field_age_males = ebd_value_field_create ( $genders['M'] );
        //fwrite ( $debug, "new_node : " . print_r ( $new_node, TRUE ) . "\n" );
        node_save ( $new_node );
    }

    drupal_set_message ( count ( $data ) . " age data generated", 'status' ); 

    drupal_goto ( "uploads-list" );
}


/**
 * Create, save and return an agreements node with the given values.  Only
 * save values if the previous answer is ok.
 **/
function ebd_agreement_create_node ( $values )
{
    global $user;
    global $EBD_DEBUG_FILE;
    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_agreement_create_node\n" );
    //fwrite ( $debug, "values : " . print_r ( $values, TRUE ) . "\n" );

    $userx = user_load ( $user->uid );

    $node = new stdClass();
    $node->type = "agreements";
    $node->title = $userx->field_user_pi[LANGUAGE_NONE][0]['value'];
    $node->is_new = TRUE;
    $node->uid = $user->uid;
    $node->status = 1;

    $node->field_agreements_contribute = ebd_value_field_create
        ( $values['contribute'] );

    if ( $values['contribute'] == 1 )
    {
        $node->field_agreements_storing = ebd_value_field_create
            ( $values['storing'] );

        if ( $values['storing'] == 1 )
        {
            $node->field_agreements_additional = ebd_value_field_create
                ( $values['additional'] );

            if ( $values['additional'] === "0" )
                $node->field_agreements_usc = ebd_value_field_create
                    ( $values['usc'] );
        }
    }
    //fwrite ( $debug, "node : " . print_r ( $node, TRUE ) . "\n" );

    node_save ( $node );
    return ( $node );
}


/**
 * Create the user agreement form.  If there is a login redirect to reset user
 * password, then will redirect there and add destination to return to this
 * form.
 **/
function ebd_agreement_form ( $form, &$form_state )
{
    global $user;
    global $EBD_DEBUG_FILE;
    global $EBD_AGREEMENT_STATUS_NO;
    global $EBD_AGREEMENT_STATUS_OK;
    global $EBD_UPLOAD_URL;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_agreement_form\n" );
    $userx = user_load ( $user->uid );
    //fwrite ( $debug, "userx : " . print_r ( $userx, TRUE ) . "\n" );

    if ( ! empty ( $userx->field_user_agreement_status ) )
    {
        $status =
            $userx->field_user_agreement_status[LANGUAGE_NONE][0]['value'];
        //fwrite ( $debug, "status : " . print_r ( $status, TRUE ) . "\n" );
        if ( $status == $EBD_AGREEMENT_STATUS_OK )
            drupal_set_message
                ( "You've already agreed.  If you wish to revoke or update your agreement, please complete a new agreement below.  If you wish to re-upload your data, click " .
                l ( "here", $EBD_UPLOAD_URL ) );
        else if ( $status == $EBD_AGREEMENT_STATUS_NO )
            drupal_set_message
                ( "You've previously chosen not to participate.  If you would like to participate now, please complete a new agreement below.",
                'warning' );
    }

    drupal_set_title ( "ENIGMA Brain Age Analysis Agreement" );

    $form = array();
    // Instead of using the node_add and fixing how things are display, it is
    // easier to just create the agreement form
    //$form = node_add ( "agreements" );
    //fwrite ( $debug, "form 2 : " . print_r ( $form, TRUE ) . "\n" );

    $form['pi'] = array (
        '#title' => 'PI : ' . $userx->field_user_pi[LANGUAGE_NONE][0]['value'],
        '#type' => 'item',
    );

    $form['email'] = array (
        '#title' => 'Your email : ' . $userx->mail,
        '#type' => 'item',
    );

    $form['hr'] = array (
        '#markup' => '<hr>',
    );

    $form['contribute'] = array (
        '#title' => 'Do you agree to contribute data from your cohort (cortical/subcortical brain measures and clinical/demographic variables) for the sole purpose of addressing the aims outlined in the brain aging <a href="sites/default/files/Analysis_Plan_for_ENIGMA-BD_Brain_Age.pdf" target="_secondary">secondary proposal</a>?',
        '#required' => TRUE,
        '#options' => array ( '1' => 'Yes', '0' => 'No' ),
        '#type' => 'radios',
    );

    $form['storing'] = array (
        '#title' => 'Do you agree to securely storing data from your cohort (brain measures and clinical/demographic variables) on the XSEDE Jetstream and UCSD servers (PI- Lisa Eyler) and on servers at Orygen in Australia (PI-Lianne Schmaal) where only the analysts named in the proposal will have access for the specific aims of this project?',
        '#options' => array ( '1' => 'Yes', '0' => 'No' ),
        '#type' => 'radios',
        '#states' => array (
            'visible' =>
                array ( ':input[name="contribute"]' => array ( 'value' => '1' ) ),
        ),
    );

    $form['additional'] = array (
        '#title' => 'Are there any additional formal requirements or agreements that must be completed to contribute your data to the brain aging project aside from PI permission (e.g. IRB approval, material transfer agreement, etc.)?',
        '#options' => array ( '1' => 'Yes', '0' => 'No' ),
        '#type' => 'radios',
        '#states' => array (
            'visible' =>
                array ( ':input[name="contribute"]' => array ( 'value' => '1' ),
                    ':input[name="storing"]' => array ( 'value' => '1' ) ),
        ),
    );

    $form['usc'] = array (
        '#title' => 'Do you give permission for USC to upload the required files for the brain age analysis (CorticalMeasuresENIGMA_SurfAvg.csv, CorticalMeasuresENIGMA_ThickAvg.csv, LandRVolumes.csv, and covariates.csv) on your behalf?  If you select "yes", you will need to work with Chris Ching at USC to make sure that he has all the necessary files, and then his group will perform the upload process for you. Select one of the "no" answers if you have the files ready to contribute yourself and would rather not go through the intermediary of USC.',
        '#options' => array ( '2' => 'Yes',
            '1' => 'No, USC doesn’t have any of my data',
            '0' => 'No, USC may have some of my data, but I prefer to do the upload myself' ),
        '#type' => 'radios',
        '#states' => array (
            'visible' => array (
                ':input[name="contribute"]' => array ( 'value' => '1' ),
                ':input[name="storing"]' => array ( 'value' => '1' ),
                ':input[name="additional"]' => array ( 'value' => '0' ),
            ),
        ),
    );

    $form['submit'] = array ( '#type' => 'submit', '#value' => 'Submit' );
        //'#validate' => 'ebd_agreement_form_validate' );
    //fwrite ( $debug, "form[submit] : " . print_r ( $form['submit'], TRUE ) . "\n" );

    return ( $form );
}


/**
 * Handle the user submission form
 **/
function ebd_agreement_form_submit ( $form, &$form_state )
{
    global $user;

    global $EBD_AGREEMENT_STATUS_NO;
    global $EBD_AGREEMENT_STATUS_OK;
    global $EBD_AGREEMENT_STATUS_REDO;
    global $EBD_BLANK_PAGE;
    global $EBD_DEBUG_FILE;
    global $EBD_LOGOUT_URL;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_agreement_form_submit\n" );
    $values = $form_state['values'];
    //fwrite ( $debug, "values : " . print_r ( $values, TRUE ) . "\n" );
    $node = ebd_agreement_create_node ( $values );
    //fwrite ( $debug, "node : " . print_r ( $node, TRUE ) . "\n" );

    $userx = user_load ( $user->uid );
    //fwrite ( $debug, "userx : " . print_r ( $userx, TRUE ) . "\n" );

    drupal_get_messages();

    if ( $values['contribute'] === "0" )
    {
        drupal_set_message
            ( "You've chosen not to contribute your data.  You may now " .
            l ( "logout", $EBD_LOGOUT_URL ) . ".  Thank you." );
        $userx->field_user_agreement_status = ebd_value_field_create
            ( $EBD_AGREEMENT_STATUS_NO );
        user_save ( $userx );
        drupal_goto ( $EBD_BLANK_PAGE );
    }

    else if ( $values['storing'] === "0" )
    {
        drupal_set_message
            ( "You've chosen not to allow us to store your data.  You may now " .
            l ( "logout", $EBD_LOGOUT_URL ) . ".  Thank you." );
        $userx->field_user_agreement_status = ebd_value_field_create 
            ( $EBD_AGREEMENT_STATUS_NO );
        user_save ( $userx );
        drupal_goto ( $EBD_BLANK_PAGE );
    }

    else if ( $values['additional'] === "1" )
    {
        drupal_set_message
            ( "All approvals must be in place before uploading data, please return to the website and complete another agreement form when all approvals have been secured.  You may now " .
            l ( "logout", $EBD_LOGOUT_URL ) . ".  Thank you.", 'warning' );
        $userx->field_user_agreement_status = ebd_value_field_create
            ( $EBD_AGREEMENT_STATUS_REDO );
        user_save ( $userx );
        drupal_goto ( $EBD_BLANK_PAGE );
    }

    //else if ( $values['shared'] === "1" && $values['usc'] === "1" )
    else if ( $values['usc'] === "2" )
    {
        drupal_set_message
            ( "Thank you!  We will request your data from the USC group. You may now " .
            l ( "logout", $EBD_LOGOUT_URL ) . "." );
        $userx->field_user_agreement_status = ebd_value_field_create
            ( $EBD_AGREEMENT_STATUS_OK );
        user_save ( $userx );
        drupal_goto ( $EBD_BLANK_PAGE );
    }

    else 
    {
        unset ( $_GET['destination'] );
        drupal_goto ( "upload" );
    }
}


/**
 * Validate the user agreement form.  Only the first question is required
 * but subsequent question(s) may be required depending on the answer to the
 * previous question.
 **/
function ebd_agreement_form_validate ( $form, &$form_state )
{
    global $EBD_DEBUG_FILE;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_agreement_form_validate\n" );
    $values = $form_state['values'];
    //fwrite ( $debug, "values : " . print_r ( $values, TRUE ) . "\n" );

    if ( $values['contribute'] === "1" && ! isset ( $values['storing'] ) )
        form_set_error ( 'storing', 'Please answer second question...' );
    else if ( $values['contribute'] === "1" && $values['storing'] === "1" &&
        ! isset ( $values['additional'] ) )
        form_set_error ( 'storing', 'Please answer third question...' );
    else if ( $values['contribute'] === "1" && $values['storing'] === "1" &&
        $values['additional'] === "0" && $values['usc'] == NULL )
        form_set_error ( 'usc', 'Please answer last question...' );
}


/**
 * This is the callback function for combining user upload data files for a
 * single PI.  It can be used by either the UI or another function (set $ui
 * parameter to false)
 * @param $node - upload node
 * @param $ui - true (default) if need user-interface interactions; false if
 *      called by a function and no user-interface interaction is needed
 * @return true if successful; false otherwise
 **/
function ebd_combine ( $node, $ui = true )
{
    global $EBD_COMBINE_FILENAME;
    global $EBD_DEBUG_FILE;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_combine\n" );
    //fwrite ( $debug, "node : " . print_r ( $node, TRUE ) . "\n" );

    if ( empty ( $node ) )
    {
        if ( $ui )
            drupal_set_message ( "Invalid upload info!", 'error' );
        else
            return ( false );
    }

    $combined = array();
    $combined = ebd_combine_get_data (
        $node->field_upload_covariates_file[LANGUAGE_NONE][0]['uri'],
        $combined );
    //fwrite ( $debug, "combined 1 : " . print_r ( $combined, TRUE ) . "\n" );
    if ( empty ( $combined ) )
    {
        if ( $ui )
            drupal_set_message ( "Error combining covariate file!" );
        else
            return ( false );
    }

    $combined = ebd_combine_get_data (
            $node->field_upload_surface_file[LANGUAGE_NONE][0]['uri'],
            $combined );
    //fwrite ( $debug, "combined 2 : " . print_r ( $combined, TRUE ) . "\n" );
    if ( empty ( $combined ) )
    {
        if ( $ui )
            drupal_set_message ( "Error combining surface file!" );
        else
            return ( false );
    }

    $combined = ebd_combine_get_data (
        $node->field_upload_thickness_file[LANGUAGE_NONE][0]['uri'],
        $combined );
    //fwrite ( $debug, "combined 3 : " . print_r ( $combined, TRUE ) . "\n" );
    if ( empty ( $combined ) )
    {
        if ( $ui )
            drupal_set_message ( "Error combining thickness file!" );
        else
            return ( false );
    }

    $combined = ebd_combine_get_data (
        $node->field_upload_volumes_file[LANGUAGE_NONE][0]['uri'], $combined );
    //fwrite ( $debug, "combined 4 : " . print_r ( $combined, TRUE ) . "\n" );
    if ( empty ( $combined ) )
    {
        if ( $ui )
            drupal_set_message ( "Error combining volume file!" );
        else
            return ( false );
    }

    if ( empty ( ebd_combine_save ( $node, $combined ) ) )
    {
        if ( $ui )
            drupal_set_message ( "Error saving combined file!" );
        else
            return ( false );
    }

    if ( $ui )
    {
        drupal_set_message ( "Successfully created " . $EBD_COMBINE_FILENAME .
            " for PI " . $node->title );
        drupal_goto ( "uploads-list" );
    }
    else
        return ( true );
}


/**
 * Read the file at the given uri.  This function assumes the subject ID is
 * the first column.
 * @return  NULL if there is a problem getting the data from the file;
 *          otherwise return a nested indexed array ( "header" =>
 *          column header strings WITHOUT the SubjID, "rows" => indexed array
 *          ( "<SubjID>" => "<remaining row values>")
 **/
function ebd_combine_get_data ( $uri, $data = null )
{
    global $EBD_DEBUG_FILE;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_combine_get_data\n" );
    //fwrite ( $debug, "uri : " . print_r ( $uri, TRUE ) . "\n" );
    //fwrite ( $debug, "data 1 : " . print_r ( $data, TRUE ) . "\n" );

    if ( empty ( $uri ) )
        return ( NULL );

    // Following setting is needed in case the file came from a PC which
    // results in newline problem
    ini_set ( 'auto_detect_line_endings', TRUE );
    $file_handle = fopen ( $uri, "r" );
    $headers = trim ( fgets ( $file_handle ) );
    //fwrite ( $debug, "headers : " . print_r ( $headers, TRUE ) . "\n" );

    // Make sure subject ID is the first column
    $pieces = explode ( ",", $headers, 2 );
    //fwrite ( $debug, "pieces : " . print_r ( $pieces, TRUE ) . "\n" );
    if ( strcasecmp ( $pieces[0], "SubjID" ) !== 0 )
        return ( NULL );

    if ( empty ( $data ) )
    {
        $data['headers'] = $headers;
        //fwrite ( $debug, "headers : " . print_r ( $headers, TRUE ) . "\n" );
        $rows = array();

        while ( ( $line = fgets ( $file_handle ) ) != FALSE )
        {
            $pieces = explode ( ",", $line, 2 );
            $rows[$pieces[0]] = trim ( $pieces[1] );
        }
        //fwrite ( $debug, "rows : " . print_r ( $rows, TRUE ) . "\n" );
        //$data['rows'] = $rows;
    }
    else
    {
        $data['headers'] .= "," . $pieces[1];
        $rows = $data['rows'];

        while ( ( $line = fgets ( $file_handle ) ) != FALSE )
        {
            $pieces = explode ( ",", $line, 2 );
            $rows[$pieces[0]] .= "," . trim ( $pieces[1] );
        }
    }
    fclose ( $file_handle );

    $data['rows'] = $rows;
    //fwrite ( $debug, "data 2 : " . print_r ( $data, TRUE ) . "\n" );

    return ( $data );
}


function ebd_combine_save ( &$node, $data )
{
    global $EBD_COMBINE_FILENAME;
    global $EBD_DEBUG_FILE;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_combine_save\n" );
    //fwrite ( $debug, "node : " . print_r ( $node, TRUE ) . "\n" );
    //fwrite ( $debug, "data : " . print_r ( $data, TRUE ) . "\n" );

    if ( empty ( $node ) || empty ( $data ) )
        return ( null );

    $content = $data['headers'] . "\n";
    $uri = $node->field_upload_covariates_file[LANGUAGE_NONE][0]['uri'];
    //fwrite ( $debug, "uri : " . print_r ( $uri, TRUE ) . "\n" );
    $index = strrpos ( $uri, "/" );
    $uri_path = substr ( $uri, 0, $index + 1 );
    //fwrite ( $debug, "uri_path : " . print_r ( $uri_path, TRUE ) . "\n" );

    foreach ( $data['rows'] as $subjid => $value )
        $content .= $subjid . "," . $value . "\n";

    $file = file_save_data ( $content, $uri_path . $EBD_COMBINE_FILENAME,
        FILE_EXISTS_REPLACE );

    // file display must be set before saving it to a node
    $file->display = 1;

    $node->field_upload_combined_file = array ( LANGUAGE_NONE => array (
        ( array ) $file ) );
    node_save ( $node );

    return ( $node );
}


/**
 * Check the given covariates file.  Will display error if found and return 0.
 * @return NULL - if error found in file; otherwise will return a hashed
 *                  array of the data read in and validated.
 **/ 
function ebd_covariates_check ( $file )
{
    global $EBD_DEBUG_FILE;
    global $EBD_PRIVATE_URI_PREFIX;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_covariates_check\n" );

    $data = NULL;

    if ( empty ( $file ) )
    {
        drupal_set_message ( "Error: file empty!", "error" );
        return ( $data );
    }

    // Following setting is needed in case the file came from a PC which
    // results in newline problem
    ini_set ( 'auto_detect_line_endings', TRUE );
    $file_handle = fopen ( $file->uri, "r" );

    // First, check header
    $age_index = -1;
    $dx_index = -1;
    $gender_index = -1;
    $missing_columns = array();
    $site_index = -1;
    $subjid_index = -1;
    $headers = fgetcsv ( $file_handle, 0, "," );
    //fwrite ( $debug, "headers : " . print_r ( $headers, TRUE ) . "\n" );

    foreach ( $headers as $index => $header )
    {
        //fwrite ( $debug, "index : " . print_r ( $index, TRUE ) . "\n" );
        //fwrite ( $debug, "header : " . print_r ( $header, TRUE ) . "\n" );

        if ( strcasecmp ( $header, "SubjID" ) === 0 )
            $subjid_index = $index;
        else if ( strcasecmp ( $header, "Dx" ) === 0 )
            $dx_index = $index;
        else if ( strcasecmp ( $header, "Age" ) === 0 )
            $age_index = $index;
        else if ( strcasecmp ( $header, "Sex" ) === 0 )
            $gender_index = $index;
        else
        {
            $site = substr ( $header, 0, 4 );
            if ( strcasecmp ( $site, "Site" ) === 0 )
                $site_index = $index;
        }
    }
    //fwrite ( $debug, "subjid_index : " . print_r ( $subjid_index, TRUE ) . "\n" );
    //fwrite ( $debug, "dx_index : " . print_r ( $dx_index, TRUE ) . "\n" );
    //fwrite ( $debug, "age_index : " . print_r ( $age_index, TRUE ) . "\n" );
    //fwrite ( $debug, "gender_index : " . print_r ( $gender_index, TRUE ) . "\n" );
    //fwrite ( $debug, "site_index : " . print_r ( $site_index, TRUE ) . "\n" );

    // Check required columns' index
    if ( $subjid_index == -1 )
        $missing_columns[] = "SubjID";

    if ( $dx_index == -1 )
        $missing_columns[] = "Dx";

    if ( $age_index == -1 )
        $missing_columns[] = "Age";

    if ( $gender_index == -1 )
        $missing_columns[] = "Sex";

    if ( ! empty ( $missing_columns ) )
    {
        $message = "Error: missing required column";

        if ( count ( $missing_columns ) > 1 )
            $message .= "s";

        drupal_set_message ( $message . " (" .
            implode ( ", ", $missing_columns ) . ")!", "error" );

        return ( null );
    }

    $cont = TRUE;
    $data = array();
    $entries = array();
    $line_counter = 2;
    $num_sites = 1;
    $sites = array();
    $subjects = array();

    // Now check and save each line...
    while ( ( $line = fgetcsv ( $file_handle, 0, "," ) ) != FALSE )
    {
        //fwrite ( $debug, "line : " . print_r ( $line, TRUE ) . "\n" );

        if ( empty ( $line[$subjid_index] ) )
        {
            drupal_set_message ( "Missing SubjID on line " . $line_counter,
                'error', FALSE );
            $cont = FALSE;
            break;
        } 

        if ( $line[$dx_index] !== '0' && $line[$dx_index] !== '1' )
        {
            drupal_set_message ( "Invalid Dx (must be 0 or 1) on line " .
                $line_counter, 'error', FALSE );
            $cont = FALSE;
            break;
        }

        if ( empty ( $line[$age_index] ) || ( int ) $line[$age_index] <= 0 )
        {
            drupal_set_message ( "Invalid Age (must be > 0 ) on line " .
                $line_counter, 'error', FALSE );
            $cont = FALSE;
            break;
        }

        if ( $line[$gender_index] !== '1' && $line[$gender_index] !== '2' )
        {
            drupal_set_message ( "Invalid Sex (must be 1 or 2) on line " .
                $line_counter, 'error', FALSE );
            $cont = FALSE;
            break;
        }

        if ( $site_index > -1 )
        {
            if ( ! isset ( $line[$site_index] ) )
            {
                drupal_set_message (
                    "Invalid Site value (must be > 0) on line " .
                    $line_counter, 'error', FALSE );
                $cont = FALSE;
                break;
            }

            else
            {
                $site_value = ( int ) $line[$site_index];
                //fwrite ( $debug, "site_value : " . print_r ( $site_value, TRUE ) . "\n" );

                if ( $site_value <= 0 )
                {
                    drupal_set_message (
                        "Invalid Site value (must be > 0) on line " .
                        $line_counter, 'error', FALSE );
                    $cont = FALSE;
                    break;
                }
                else
                    $sites[$site_value] = 1;
            }
        }

        $entry = array();
        $entry['subjid'] = $line[$subjid_index];
        $entry['dx'] = $line[$dx_index];
        $entry['age'] = $line[$age_index];
        $entry['gender'] = $line[$gender_index];
        $subjects[] = $line[$subjid_index];

        $entries[] = $entry;
        $line_counter++;
    }

    fclose ( $file_handle );

    //fwrite ( $debug, "cont : " . print_r ( $cont, TRUE ) . "\n" );
    //fwrite ( $debug, "entries : " . print_r ( $entries, TRUE ) . "\n" );
    //fwrite ( $debug, "sites : " . print_r ( $sites, TRUE ) . "\n" );

    if ( empty ( $subjects ) )
    {
        drupal_set_message ( "No subjects found!\n", 'error' );
        return ( null );
    }

    if ( $cont )
    {
        $data['entries'] = $entries;
        $data['subjects'] = $subjects;

        if ( empty ( $sites ) )
            $data['sites'] = 1;
        else
        {
            $tmp = count ( $sites );
            //fwrite ( $debug, "tmp : " . print_r ( $tmp, TRUE ) . "\n" );
            ksort ( $sites );
            //fwrite ( $debug, "sites (sorted) : " . print_r ( $sites, TRUE ) . "\n" );
            end ( $sites );
            $key = key ( $sites );
            //fwrite ( $debug, "key : " . print_r ( $key, TRUE ) . "\n" );

            if ( $tmp != $key )
            {
                drupal_set_message (
                    "There is a problem with your Site column, please make sure the values in that column are integers starting at 1 with no gaps",
                    'error', FALSE );
                $data = null;
            }
        }
    }
    else
        $data = NULL;
    //fwrite ( $debug, "data : " . print_r ( $data, TRUE ) . "\n" );

    return ( $data );
}


/**
 * Retrieve the information from the given covariates file. The file should
 * have been checked during upload so we will assume the file is ok.
 * @return NULL - if error reading the file; otherwise will return a hashed
 *                array (key = subject id) of the data read in and validated.
 **/ 
function ebd_covariates_get_data ( $uri )
{
    global $EBD_DEBUG_FILE;
    global $EBD_PRIVATE_URI_PREFIX;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_covariates_get_data\n" );

    $data = NULL;

    if ( empty ( $uri ) )
        return ( NULL );

    $file = new stdClass();
    $file->uri = $uri;
    $result = ebd_covariates_check ( $file );

    foreach ( $result['entries'] as $entry )
        $data[$entry['subjid']] = $entry;
    //fwrite ( $debug, "data : " . print_r ( $data, TRUE ) . "\n" );

    return ( $data );
}


/**
 * Implements hook_file_download
 *
 * Only checks for the master file, no other.  If the user has the
 * data administrator role, will give access by returning the mime type;
 * otherwise return NULL which means this module does not manage the file. 
 **/
function ebd_file_download ( $uri )
{
    global $user;
    global $EBD_DEBUG_FILE;
    global $EBD_MASTER_FILENAME;
    global $EBD_PRIVATE_URI_PREFIX;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_file_download\n" );
    //fwrite ( $debug, "user : " . print_r ( $user, TRUE ) . "\n" );
    //fwrite ( $debug, "uri : " . print_r ( $uri, TRUE ) . "\n" );

    if ( $uri == $EBD_PRIVATE_URI_PREFIX . $EBD_MASTER_FILENAME &&
        user_has_role ( 5 ) )
    {
        $mimetype = file_get_mimetype ( $uri );
        //fwrite ( $debug, "mimetype : " . print_r ( $mimetype, TRUE ) . "\n" );

        return ( array ( 'Content-Type' => $mimetype ) );
    }
    else
        return ( NULL );
}


/**
 * Remove the unneeded upload button on the file upload forms
 **/
function ebd_file_element_process ( $element, &$form_state, $form )
{
    global $EBD_DEBUG_FILE;
    global $EBD_PRIVATE_URI_PREFIX;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_file_element_process\n" );
    //fwrite ( $debug, "element 1 : " . print_r ( $element, TRUE ) . "\n" );

    $element = file_managed_file_process($element, $form_state, $form);
    $element['upload_button']['#access'] = FALSE;
    //fwrite ( $debug, "element 2 : " . print_r ( $element, TRUE ) . "\n" );

    return ( $element );
}


function ebd_get_agreements_by_uid ( $userid )
{
    global $EBD_DEBUG_FILE;
    global $EBD_PRIVATE_URI_PREFIX;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_get_agreements_by_uid\n" );
    //fwrite ( $debug, "userid : " . print_r ( $userid, TRUE ) . "\n" );

    if ( empty ( $userid ) )
        return ( NULL );

    $agreements = array();
    $query = "SELECT nid FROM node WHERE type='agreements' AND uid='" .
        $userid . "'";
    //fwrite ( $debug, "query : " . print_r ( $query, TRUE ) . "\n" );
    $result = db_query ( $query );

    foreach ( $result as $record )
        $agreements[] = node_load ( $record->nid );
    //fwrite ( $debug, "agreements : " . print_r ( $agreements, TRUE ) . "\n" );

    return ( $agreements );
}


function ebd_get_pi_by_uid ( $userid )
{
    global $EBD_DEBUG_FILE;
    global $EBD_PRIVATE_URI_PREFIX;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_get_pi_by_uid\n" );
    //fwrite ( $debug, "userid : " . print_r ( $userid, TRUE ) . "\n" );

    if ( empty ( $userid ) )
        return ( NULL );

    $userx = user_load ( $userid );
    return ( $userx->field_user_pi[LANGUAGE_NONE][0]['value'] );
}


/**
 * Page callback for "masterfile/download" sub-URL.  The masterfile.csv needs
 * special handling because it is not attached to any node so cannot be
 * downloaded like other uploaded files.
 **/
function ebd_masterfile_download()
{
    global $user;
    global $EBD_DEBUG_FILE;
    global $EBD_MASTER_FILENAME;
    global $EBD_PRIVATE_URI_PREFIX;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_masterfile_download\n" );

    $file_uri = $EBD_PRIVATE_URI_PREFIX . $EBD_MASTER_FILENAME;
    //fwrite ( $debug, "file_uri : " . print_r ( $file_uri, TRUE ) . "\n" );
    $files = entity_load ( 'file', FALSE, array ( 'uri' => $file_uri ) );
    //fwrite ( $debug, "files : " . print_r ( $files, TRUE ) . "\n" );
    $file = reset ( $files );
    //fwrite ( $debug, "file : " . print_r ( $file, TRUE ) . "\n" );
    $headers = array (
        'Content-Type' => 'force-download',
        'Content-Disposition' => 'attachment; filename="' .
            $EBD_MASTER_FILENAME . '"',
        'Content-Length' => $file->filesize,
        'Content-Transfer-Encoding' => 'binary',
        'Pragma' => 'no-cache',
        'Cache-Control' => 'must-revalidate, post-check=0, pre-check=0',
        'Expires' => '0',
        'Accept-Ranges' => 'bytes'
    );
    //fwrite ( $debug, "headers : " . print_r ( $headers, TRUE ) . "\n" );

    file_transfer ( $file_uri, $headers );
}


/**
 * Page callback for "masterfile/generate" sub-URL.
 **/
function ebd_masterfile_generate()
{
    global $EBD_COMBINE_FILENAME;
    global $EBD_DEBUG_FILE;
    global $EBD_HEADER_PI_NAME;
    global $EBD_HEADERS_COVARIATES;
    global $EBD_HEADERS_LRVOLUMES;
    global $EBD_HEADERS_SURFAVG;
    global $EBD_HEADERS_THICKAVG;
    global $EBD_MASTER_FILENAME;
    global $EBD_PRIVATE_URI_PREFIX;
    global $user;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_masterfile_generate\n" );
    //fwrite ( $debug, "master file : " . print_r ( $EBD_PRIVATE_URI_PREFIX . $EBD_MASTER_FILENAME, TRUE ) . "\n" );

    // Gather all the column headers
    $column_headers = array_merge ( array ( $EBD_HEADER_PI_NAME ),
        $EBD_HEADERS_COVARIATES, array_slice ( $EBD_HEADERS_SURFAVG, 1 ),
        array_slice ( $EBD_HEADERS_THICKAVG, 1 ),
        array_slice ( $EBD_HEADERS_LRVOLUMES, 1 ) );
    //fwrite ( $debug, "column_headers : " . print_r ( $column_headers, TRUE ) . "\n" );
    $masterfile_data = array_flip ( $column_headers );
    //fwrite ( $debug, "masterfile_data : " . print_r ( $masterfile_data, TRUE ) . "\n" );
    $new_masterfile = true;

    $query = "SELECT * FROM node WHERE type='uploads'";
    $result = db_query ( $query );
    //$count = 1;

    // Go through each uploads...
    foreach ( $result as $record )
    {
        //fwrite ( $debug, "record : " . print_r ( $record, TRUE ) . "\n" );
        $node = node_load ( $record->nid );
        //fwrite ( $debug, "node : " . print_r ( $node, TRUE ) . "\n" );
        //fwrite ( $debug, "PI : " . print_r ( $node->title, TRUE ) . "\n" );

        // If no combine file, create it first
        if ( empty ( $node->field_upload_combined_file ) )
        {
            $combined = ebd_combine ( $node, false );
            //fwrite ( $debug, "combined : " . print_r ( $combined, TRUE ) . "\n" );
            if ( $combined )
                drupal_set_message ( "Successfully create missing " .
                    $EBD_COMBINE_FILENAME . " for PI " . $node->title );
            else
                drupal_set_message ( "Unable to create missing " .
                    $EBD_COMBINE_FILENAME . " for PI " . $node->title .
                    ". Upload skipped!", "warning" );

            $node = node_load ( $node->nid );
        }

        /* read entire file into string
        $content = file_get_contents
            ( $node->field_upload_combined_file[LANGUAGE_NONE][0]['uri'] );
        fwrite ( $debug, "content : " . print_r ( $content, TRUE ) . "\n" );
        */

        // Get the data from the combined file
        $new_data = ebd_masterfile_get_data ( $node->title, 
            $node->field_upload_combined_file[LANGUAGE_NONE][0]['uri'] );
        //fwrite ( $debug, "new_data : " . print_r ( $new_data, TRUE ) . "\n" );

        if ( $new_masterfile )
        {
            //fwrite ( $debug, "new masterfile\n" );
            foreach ( $masterfile_data as $key => $value )
            {
                $masterfile_data[$key] = $new_data[$key];
                unset ( $new_data[$key] );
            }
            //fwrite ( $debug, "masterfile_data : " . print_r ( $masterfile_data, TRUE ) . "\n" );
            //fwrite ( $debug, "new_data : " . print_r ( $new_data, TRUE ) . "\n" );

            $new_masterfile = false;
        }
        else
        {
            //fwrite ( $debug, "not new masterfile\n" );
            foreach ( $masterfile_data as $key => $value )
            {
                if ( empty ( $new_data[$key] ) )
                    drupal_set_message ( "PI " . $node->title .
                        " data is missing column " . $key, "error" );
                else
                {
                    $masterfile_data[$key] = array_merge
                        ( $masterfile_data[$key], $new_data[$key] );
                    unset ( $new_data[$key] );
                }
            }
            //break;
        }

        if ( ! empty ( $new_data ) )
        {
            //fwrite ( $debug, "new_data keys : " . print_r ( array_keys ( $new_data ), TRUE ) . "\n" );
            $xcolumns = implode ( ", ", array_keys ( $new_data ) );
            drupal_set_message ( "PI " . $node->title . " data contains " .
                count ( $new_data ) . " extra column(s) : " . $xcolumns .
                ", ignored", "warning" );
        }

        /*
        $count++;

        if ( $count == 3 )
            break;
        */
    }
    //fwrite ( $debug, "masterfile_data : " . print_r ( $masterfile_data, TRUE ) . "\n" );

    // Output and save to master file
    $masterfile_uri = $EBD_PRIVATE_URI_PREFIX . $EBD_MASTER_FILENAME;
    $masterfile_handle = fopen ( $masterfile_uri, "w" );
    $headers = array_keys ( $masterfile_data );
    fwrite ( $masterfile_handle, implode ( ",", $headers ) . "\n" );
    $max_subject_index = count ( $masterfile_data[$EBD_HEADER_PI_NAME] ) - 1;
    //fwrite ( $debug, "max_subject_index : " . print_r ( $max_subject_index, TRUE ) . "\n" );

    for ( $i = 0; $i < $max_subject_index; $i++ )
    {
        $first = true;
        $line = "";

        foreach ( $masterfile_data as $key => $value )
            if ( $first )
            {
                $line = $value[$i];
                $first = false;
            }
            else
                $line .= "," . $value[$i];

        fwrite ( $masterfile_handle, $line . "\n" );
        //break;
    }
    $result = fclose ( $masterfile_handle );

    /* Create the masterfile object and tell Drupal about it.  This needed to
       be done only once...ever!  Since it has been done already, hence the
       code is commented out but I've left the code here in case the Drupal
       file ever gets deleted.  The master file is now in Drupal's DB and can
       be overwritten as needed...no need to update the DB entry.  Also, did
       not set the file size because it may change
    // Create the master file entry
    $file = new stdClass();
    $file->uid = $user->uid;
    $file->filename = $EBD_MASTER_FILENAME;
    $file->uri = $EBD_PRIVATE_URI_PREFIX . $EBD_MASTER_FILENAME;
    $file->status = FILE_STATUS_PERMANENT;
    $file->filemime = "text/csv";
    //$file->size = filesize ( $file->uri );
    $file = file_save ( $file );
    fwrite ( $debug, "saved file : " . print_r ( $file, TRUE ) . "\n" );
    */

    $masterfile_size = filesize ( $masterfile_uri );
    //fwrite ( $debug, "masterfile_size : " . print_r ( $masterfile_size, TRUE ) . "\n" );
    $files = entity_load ( 'file', FALSE, array ( 'uri' => $masterfile_uri ) );
    //fwrite ( $debug, "files : " . print_r ( $files, TRUE ) . "\n" );
    $file = reset ( $files );
    //fwrite ( $debug, "file : " . print_r ( $file, TRUE ) . "\n" );
    $file->filesize = $masterfile_size;
    file_save ( $file );
    //fwrite ( $debug, "saved file : " . print_r ( $file, TRUE ) . "\n" );

    if ( $result )
        drupal_set_message ( "Successfully updated " . $EBD_MASTER_FILENAME );

    drupal_goto ( "uploads-list" );
}


/**
 * Read the file at given uri and parse data
 * @param $uri - URI of the combined data
 * @return null if either arguments is empty; otherwise a key/value array
 *      where the key is the column title and the value is an array of data
 *      values (in the same order)
 **/
function ebd_masterfile_get_data ( $pi_name, $uri )
{
    global $EBD_DEBUG_FILE;
    global $EBD_HEADER_PI_NAME;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_masterfile_get_data\n" );

    if ( empty ( $pi_name ) || empty ( $uri ) )
        return ( null );

    $file_handle = fopen ( $uri, "r" );

    // First, check headers...
    $headers = fgetcsv ( $file_handle, 0, "," );
    //fwrite ( $debug, "headers 1 : " . print_r ( $headers, TRUE ) . "\n" );
    array_unshift ( $headers, $EBD_HEADER_PI_NAME );
    //fwrite ( $debug, "headers 2 : " . print_r ( $headers, TRUE ) . "\n" );
    $ncolumns = count ( $headers );
    //fwrite ( $debug, "ncolumns : " . print_r ( $ncolumns, TRUE ) . "\n" );
    $all = array ( $headers );
    //fwrite ( $debug, "all 1 : " . print_r ( $all, TRUE ) . "\n" );

    while ( ( $line = fgetcsv ( $file_handle, 0, "," ) ) != FALSE )
    {
        //fwrite ( $debug, "line 1 : " . print_r ( $line, TRUE ) . "\n" );
        array_unshift ( $line, $pi_name );
        //fwrite ( $debug, "line 2 : " . print_r ( $line, TRUE ) . "\n" );
        $all = array_merge ( $all, array ( $line ) );
        //fwrite ( $debug, "all : " . print_r ( $all, TRUE ) . "\n" );
        //$pieces = explode ( ",", $line, 2 );
        //$rows[$pieces[0]] = trim ( $pieces[1] );
        //break;
    }
    //fwrite ( $debug, "all 3 : " . print_r ( $all, TRUE ) . "\n" );

    // Now created the nested array indexed by the column header
    $data = array();
    for ( $i = 0; $i < $ncolumns; $i++ )
    {
        $column = array_column ( $all, $i );
        //fwrite ( $debug, "column 1 : " . print_r ( $column, TRUE ) . "\n" );
        $name = array_shift ( $column );
        //fwrite ( $debug, "name : " . print_r ( $name, TRUE ) . "\n" );
        //fwrite ( $debug, "column 2 : " . print_r ( $column, TRUE ) . "\n" );
        $data[$name] = $column;
        /*
        if ( $i == 2 )
            break;
        */
    }
    //fwrite ( $debug, "data : " . print_r ( $data, TRUE ) . "\n" );

    fclose ( $file_handle );

    return ( $data );
}


/**
 * Implements hook_menu
 **/
function ebd_menu()
{
    global $EBD_DATA_ADMIN_ROLE_ID;

    $items['agreement'] = array (
        'title' => "Agreement",
        'access arguments' => array ( "Upload data" ),
        'page callback' => 'drupal_get_form',
        'page arguments' => array ( 'ebd_agreement_form' ),
        'type' => MENU_CALLBACK,
    );

    $items['combine/%node'] = array (
        'title' => "Upload",
        'access arguments' => array ( "Combine data" ),
        'page callback' => 'ebd_combine',
        'page arguments' => array ( 1 ),
        'type' => MENU_CALLBACK,
    );

    $items['generate_age_data/%node'] = array (
        'title' => "Upload",
        'access arguments' => array ( "Generate age data" ),
        'page callback' => 'ebd_age_data_generate',
        'page arguments' => array ( 1 ),
        'type' => MENU_CALLBACK,
    );

    $items['masterfile/download'] = array (
        'title' => "Download master file",
        'access callback' => "user_has_role",
        'access arguments' => array ( $EBD_DATA_ADMIN_ROLE_ID ),
        'page callback' => 'ebd_masterfile_download',
        //'page arguments' => array ( 1, 2 ),
        'type' => MENU_CALLBACK,
    );

    $items['masterfile/generate'] = array (
        'title' => "Create master file",
        'access arguments' => array ( "Combine data" ),
        'page callback' => 'ebd_masterfile_generate',
        //'page arguments' => array ( 1, 2 ),
        'type' => MENU_CALLBACK,
    );

    $items['upload'] = array (
        'title' => "Upload",
        'access arguments' => array ( "Upload data" ),
        'page callback' => 'drupal_get_form',
        'page arguments' => array ( 'ebd_upload_multipage_form', '' ),
        'type' => MENU_CALLBACK,
    );

    $items['upload/%user'] = array (
        'title' => "Upload",
        'access arguments' => array ( "Upload data" ),
        'page callback' => 'drupal_get_form',
        'page arguments' => array ( 'ebd_upload_multipage_form', 1 ),
        'type' => MENU_CALLBACK,
    );

    return ( $items );
}


/**
 * Implement hook_permission
 **/
function ebd_permission()
{
    $permissions = array();

    $permissions = array (
        'Combine data' => array ( 'title' => t ( 'Combine data' ) ),
        'Generate age data' => array ( 'title' => t ( 'Generate age data' ) ),
        'Upload data' => array ( 'title' => t ( 'Upload data' ) ),
    );

    return ( $permissions );
}


/**
 * Check the given file.  Will display error if found and return 0.
 * Important: For drupal_set_message() to actual get displayed from this
 *      function, the validate function MUST issue form_set_error()!
 * @return 0 if the file is ok, 1 if missing subject(s), 2 if other problem
 **/ 
function ebd_upload_check ( $info, $file )
{
    global $EBD_DEBUG_FILE;
    global $EBD_PRIVATE_URI_PREFIX;
    global $EBD_UPLOAD_STEPS;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_upload_check\n" );

    // Static return values
    $OK = 0;
    $MISSING_SUBJECT = 1;
    $PROBLEM = 2;

    $retval = $OK;

    if ( empty ( $info ) || empty ( $file ) )
        return ( $PROBLEM );
    //fwrite ( $debug, "info : " . print_r ( $info, TRUE ) . "\n" );

    // Following setting is needed in case the file came from a PC which
    // results in newline problem
    ini_set ( 'auto_detect_line_endings', TRUE );
    $file_handle = fopen ( $file->uri, "r" );

    // First, check headers...
    $extra_headers = array();
    $headers = fgetcsv ( $file_handle, 0, "," );
    //fwrite ( $debug, "headers : " . print_r ( $headers, TRUE ) . "\n" );
    $lrvolumes_headers = array ( "SubjID", "LLatVent", "RLatVent", "Lthal",
        "Rthal", "Lcaud", "Rcaud", "Lput", "Rput", "Lpal", "Rpal", "Lhippo",
        "Rhippo", "Lamyg", "Ramyg", "Laccumb", "Raccumb", "ICV" );
    $subjid_index = -1;
    $surfavg_headers = array ( "SubjID", "L_bankssts_surfavg",
        "L_caudalanteriorcingulate_surfavg", "L_caudalmiddlefrontal_surfavg",
        "L_cuneus_surfavg", "L_entorhinal_surfavg", "L_fusiform_surfavg",
        "L_inferiorparietal_surfavg", "L_inferiortemporal_surfavg",
        "L_isthmuscingulate_surfavg", "L_lateraloccipital_surfavg",
        "L_lateralorbitofrontal_surfavg", "L_lingual_surfavg",
        "L_medialorbitofrontal_surfavg", "L_middletemporal_surfavg",
        "L_parahippocampal_surfavg", "L_paracentral_surfavg",
        "L_parsopercularis_surfavg", "L_parsorbitalis_surfavg",
        "L_parstriangularis_surfavg", "L_pericalcarine_surfavg",
        "L_postcentral_surfavg", "L_posteriorcingulate_surfavg",
        "L_precentral_surfavg", "L_precuneus_surfavg",
        "L_rostralanteriorcingulate_surfavg", "L_rostralmiddlefrontal_surfavg",
        "L_superiorfrontal_surfavg", "L_superiorparietal_surfavg",
        "L_superiortemporal_surfavg", "L_supramarginal_surfavg",
        "L_frontalpole_surfavg", "L_temporalpole_surfavg",
        "L_transversetemporal_surfavg", "L_insula_surfavg",
        "R_bankssts_surfavg", "R_caudalanteriorcingulate_surfavg",
        "R_caudalmiddlefrontal_surfavg", "R_cuneus_surfavg",
        "R_entorhinal_surfavg", "R_fusiform_surfavg",
        "R_inferiorparietal_surfavg", "R_inferiortemporal_surfavg",
        "R_isthmuscingulate_surfavg", "R_lateraloccipital_surfavg",
        "R_lateralorbitofrontal_surfavg", "R_lingual_surfavg",
        "R_medialorbitofrontal_surfavg", "R_middletemporal_surfavg",
        "R_parahippocampal_surfavg", "R_paracentral_surfavg",
        "R_parsopercularis_surfavg", "R_parsorbitalis_surfavg",
        "R_parstriangularis_surfavg", "R_pericalcarine_surfavg",
        "R_postcentral_surfavg", "R_posteriorcingulate_surfavg",
        "R_precentral_surfavg", "R_precuneus_surfavg",
        "R_rostralanteriorcingulate_surfavg", "R_rostralmiddlefrontal_surfavg",
        "R_superiorfrontal_surfavg", "R_superiorparietal_surfavg",
        "R_superiortemporal_surfavg", "R_supramarginal_surfavg",
        "R_frontalpole_surfavg", "R_temporalpole_surfavg",
        "R_transversetemporal_surfavg", "R_insula_surfavg", "LThickness",
        "RThickness", "LSurfArea", "RSurfArea", "ICV" );
    $target_headers = array();
    $thickavg_headers = array ( "SubjID", "L_bankssts_thickavg",
        "L_caudalanteriorcingulate_thickavg", "L_caudalmiddlefrontal_thickavg",
        "L_cuneus_thickavg", "L_entorhinal_thickavg", "L_fusiform_thickavg",
        "L_inferiorparietal_thickavg", "L_inferiortemporal_thickavg",
        "L_isthmuscingulate_thickavg", "L_lateraloccipital_thickavg",
        "L_lateralorbitofrontal_thickavg", "L_lingual_thickavg",
        "L_medialorbitofrontal_thickavg", "L_middletemporal_thickavg",
        "L_parahippocampal_thickavg", "L_paracentral_thickavg",
        "L_parsopercularis_thickavg", "L_parsorbitalis_thickavg",
        "L_parstriangularis_thickavg", "L_pericalcarine_thickavg",
        "L_postcentral_thickavg", "L_posteriorcingulate_thickavg",
        "L_precentral_thickavg", "L_precuneus_thickavg",
        "L_rostralanteriorcingulate_thickavg",
        "L_rostralmiddlefrontal_thickavg", "L_superiorfrontal_thickavg",
        "L_superiorparietal_thickavg", "L_superiortemporal_thickavg",
        "L_supramarginal_thickavg", "L_frontalpole_thickavg",
        "L_temporalpole_thickavg", "L_transversetemporal_thickavg",
        "L_insula_thickavg", "R_bankssts_thickavg",
        "R_caudalanteriorcingulate_thickavg", "R_caudalmiddlefrontal_thickavg",
        "R_cuneus_thickavg", "R_entorhinal_thickavg", "R_fusiform_thickavg",
        "R_inferiorparietal_thickavg", "R_inferiortemporal_thickavg",
        "R_isthmuscingulate_thickavg", "R_lateraloccipital_thickavg",
        "R_lateralorbitofrontal_thickavg", "R_lingual_thickavg",
        "R_medialorbitofrontal_thickavg", "R_middletemporal_thickavg",
        "R_parahippocampal_thickavg", "R_paracentral_thickavg",
        "R_parsopercularis_thickavg", "R_parsorbitalis_thickavg",
        "R_parstriangularis_thickavg", "R_pericalcarine_thickavg",
        "R_postcentral_thickavg", "R_posteriorcingulate_thickavg",
        "R_precentral_thickavg", "R_precuneus_thickavg",
        "R_rostralanteriorcingulate_thickavg",
        "R_rostralmiddlefrontal_thickavg", "R_superiorfrontal_thickavg",
        "R_superiorparietal_thickavg", "R_superiortemporal_thickavg",
        "R_supramarginal_thickavg", "R_frontalpole_thickavg",
        "R_temporalpole_thickavg", "R_transversetemporal_thickavg",
        "R_insula_thickavg", "LThickness", "RThickness", "LSurfArea",
        "RSurfArea", "ICV" );

    if ( $info['step'] === $EBD_UPLOAD_STEPS[2] )
        $target_headers = $surfavg_headers;
    else if ( $info['step'] === $EBD_UPLOAD_STEPS[3] )
        $target_headers = $thickavg_headers;
    else if ( $info['step'] === $EBD_UPLOAD_STEPS[4] )
        $target_headers = $lrvolumes_headers;

    $tmp_headers = $target_headers;

    foreach ( $headers as $index => $header )
    {
        //fwrite ( $debug, "index : " . print_r ( $index, TRUE ) . "\n" );
        //fwrite ( $debug, "header : " . print_r ( $header, TRUE ) . "\n" );

        if ( strcasecmp ( $header, "SubjID" ) === 0 )
            $subjid_index = $index;

        $key = array_search ( $header, $tmp_headers );

        if ( $key === FALSE )
            $extra_headers[] = $header;
        else
            unset ( $tmp_headers[$key] );
    }
    //fwrite ( $debug, "subjid_index : " . print_r ( $subjid_index, TRUE ) . "\n" );
    //fwrite ( $debug, "extra_headers : " . print_r ( $extra_headers, TRUE ) . "\n" );
    //fwrite ( $debug, "tmp_headers : " . print_r ( $tmp_headers, TRUE ) . "\n" );

    // If no subjectID index, cannot continue!
    if ( $subjid_index == -1 )
    {
        drupal_set_message ( "Error: no SubjID column found!", 'error', FALSE );
        return ( $PROBLEM );
    }

    if ( ! empty ( $tmp_headers ) )
    {
        $message = "Error: missing required column";

        if ( count ( $tmp_headers ) > 1 )
            $message .= "s";

        drupal_set_message ( $message . " (" .
            implode ( ", ", $tmp_headers ) . ")!", 'error' );
        $retval = $PROBLEM;
    }

    if ( ! empty ( $extra_headers ) )
    {
        $message = "Error: extra column";

        if ( count ( $extra_headers ) > 1 )
            $message .= "s";

        drupal_set_message ( $message . " (" .
            implode ( ", ", $extra_headers ) . ") not allowed!", 'error' );
        $retval = $PROBLEM;
    }

    $empty_values = array();
    $extra_subjects = array();
    $line_counter = 2;
    $subjects = $info['covariates']['subjects'];

    // Now check each data line...
    while ( ( $line = fgetcsv ( $file_handle, 0, "," ) ) != FALSE )
    {
        //fwrite ( $debug, "line : " . print_r ( $line, TRUE ) . "\n" );

        $subjectID = $line[$subjid_index];
        $key = array_search ( $subjectID, $subjects );
        //fwrite ( $debug, "key : " . print_r ( $key, TRUE ) . "\n" );

        if ( $key === FALSE )
            $extra_subjects[] = $subjectID;
        else
        {
            //fwrite ( $debug, "unsetting subject : " . print_r ( $subjectID, TRUE ) . "\n" );
            unset ( $subjects[$key] );

            foreach ( $line as $i => $value )
            {
                $column = ( int ) $i + 1;
                //fwrite ( $debug, "i : " . print_r ( $i, TRUE ) . "\n" );
                //fwrite ( $debug, "value : " . print_r ( $value, TRUE ) . "\n" );
                if ( empty ( $value ) )
                    $empty_values[] = "line " . $line_counter . " in column " .
                        $target_headers[$i]; 
            }
        }

        $line_counter++;
    }

    fclose ( $file_handle );

    //fwrite ( $debug, "extra_subjects : " . print_r ( $extra_subjects, TRUE ) . "\n" );
    //fwrite ( $debug, "empty_values : " . print_r ( $empty_values, TRUE ) . "\n" );

    if ( ! empty ( $extra_subjects ) )
    {
        $message = "Error: extra subject";

        if ( count ( $extra_subjects ) > 1 )
            $message .= "s";

        drupal_set_message ( $message . " (" .
            implode ( ", ", $extra_subjects ) . ") not allowed!", "error" );

        $retval = $PROBLEM;
    }

    if ( ! empty ( $empty_values ) )
    {
        $message = "Error: missing value"; 

        if ( count ( $empty_values ) > 1 )
            $message .= "s";

        drupal_set_message ( $message . " (" .
            implode ( ", ", $empty_values ) . ") not allowed!", "error" );

        $retval = $PROBLEM;
    }

    if ( ! empty ( $subjects ) )
    {
        $num_subjects = count ( $subjects );
        $message = "";

        if ( $num_subjects == 1 )
            $message = "Warning: the following subject is ";
        else
            $message = "Warning: " . $num_subjects . " subjects are ";

        drupal_set_message ( $message . 'missing (' .
            implode ( ', ', $subjects ) . ")", 'warning' );

        if ( $retval === $OK )
            return ( $MISSING_SUBJECT );
    }

    return ( $retval );
}


/**
 * Create the multi-page user upload forms
 **/
function ebd_upload_multipage_form ( $form, &$form_state, $for_user )
{
    global $user;
    global $EBD_DEBUG_FILE;
    global $EBD_PRIVATE_URI_PREFIX;
    global $EBD_UPLOAD_INFO;
    global $EBD_UPLOAD_NEXT_BUTTON;
    global $EBD_UPLOAD_PREVIOUS_BUTTON;
    global $EBD_UPLOAD_PROCEED_BUTTON;
    global $EBD_UPLOAD_STEPS;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_upload_multipage_form\n" );
    //fwrite ( $debug, "form : " . print_r ( $form, TRUE ) . "\n" );
    //fwrite ( $debug, "form_state values : " . print_r ( $form_state['values'], TRUE ) . "\n" );
    //fwrite ( $debug, "for_user : " . print_r ( $for_user, TRUE ) . "\n" );

    $description = "";
    $max_file_size = file_upload_max_size();
    $step = $EBD_UPLOAD_STEPS[1];
    $timestamp = REQUEST_TIME;
    $title = "";
    $upload_info = array();

    drupal_set_title ( "Upload your data..." );
    drupal_get_messages();
    drupal_get_messages ( 'status' );

    if ( ! empty ( $form_state[$EBD_UPLOAD_INFO] ) )
    {
        $upload_info = $form_state[$EBD_UPLOAD_INFO];
        //fwrite ( $debug, "upload_info : " . print_r ( $upload_info, TRUE ) . "\n" );
        $timestamp = $upload_info['timestamp'];
    }
    //fwrite ( $debug, "timestamp : " . print_r ( $timestamp, TRUE ) . "\n" );

    if ( ! empty ( $upload_info['step'] ) )
        $step = $upload_info['step'];
    //fwrite ( $debug, "step : " . print_r ( $step, TRUE ) . "\n" );

    // Create the form
    $form = array();

    // First, if for_user is given, save that info
    if ( ! empty ( $for_user ) )
        $form['usc_upload_for'] = array ( '#type' => 'hidden',
            '#value' => $for_user->uid );

    $form["info"] = array ( '#markup' =>
        '<div class=\"info\">This is a multi-step form to upload your 4 files one at a time.  As a reminder, the 4 files are: covariates.csv, CorticalMeasuresENIGMA_SurfAvg.csv, CorticalMeasuresENIGMA_ThickAvg.csv, and LandRvolumes.csv.  More info about the expected file content can be found <a href="https://js-168-64.jetstream-cloud.org/node/4" target="file_format">here</a>.  If you do not have all 4 files prepared, please log out and return later when you are ready.<br><br>The upload process will check for and alert you to: 1) missing data in any fields, 2) improper coding of variables (such as Dx or Sex), and 3) lack of correspondence of SubjIDs from one file to the next.<br><br></div>' );

    if ( $step === $EBD_UPLOAD_STEPS[1] )
    {
        $form['timestamp'] = array ( '#type' => 'hidden',
            '#value' => $timestamp );

        $form["covariates_file"] = array (
            '#title' => 'Step 1. Upload your covariates.csv file',
            '#description' =>
                'The file must contain at least SubjID, Dx, Age and Sex columns. Site column is optional but if present, must be integer starting at 1. Column names are case-insensitive but must be spelled as noted.  Dx must be either 0 (control/comparison) or 1 (bipolar), Age must be greater than 0, Sex must be either 1 (males) or 2 (females). Max file size is ' .
                $max_file_size . ' bytes.',
            '#progress_indicator' => "bar",
            '#required' => TRUE,
            '#type' => "managed_file",
            '#upload_location' => $EBD_PRIVATE_URI_PREFIX . $user->uid . "/" .
                $timestamp . "/",
            '#upload_validators' => array (
                "file_validate_extensions" => array ( "csv" ),
                'file_validate_size' => array ( $max_file_size ) ),
            '#process' => array ( 'ebd_file_element_process' ),
        );

        if ( isset ( $upload_info['covariates']['file']->fid ) )
            $form['covariates_file']['#default_value'] =
                $upload_info['covariates']['file']->fid;
    }

    else if ( $step === $EBD_UPLOAD_STEPS[2] )
    {
        drupal_set_message ( count ( $upload_info['covariates']['subjects'] ) .
            " subjects validated in covariates.csv", 'status', FALSE );

        $form["surfavg_file"] = array (
            '#title' =>
                "Step 2. Upload your CorticalMeasuresENIGMA_SurfAvg.csv file",
            '#description' =>
                'The values contained in the file should have been quality checked according to instructions <a href="http://enigma.ini.usc.edu/protocols/imaging-protocols/" target="enigma_qcp">here</a>.  Individual measures not passing QC should be indicated with NA in those cells of the .csv file. Max file size is ' .
                $max_file_size . ' bytes.',
            '#progress_indicator' => "bar",
            //'#required' => TRUE,
            '#type' => "managed_file",
            '#upload_location' => $EBD_PRIVATE_URI_PREFIX . $user->uid . "/" .
                $timestamp . "/",
            '#upload_validators' => array (
                "file_validate_extensions" => array ( "csv" ),
                'file_validate_size' => array ( $max_file_size ) ),
            '#process' => array ( 'ebd_file_element_process' ),
        );
    
        if ( isset ( $upload_info['surfavg']['file']->fid ) )
            $form['surfavg_file']['#default_value'] =
                $upload_info['surfavg']['file']->fid;
    }

    else if ( $step === $EBD_UPLOAD_STEPS[3] )
    {
        drupal_set_message
            ( 'CorticalMeasuresENIGMA_SurfAvg.csv file successfully validated' );

        $form["thickavg_file"] = array (
            '#title' =>
                "Step 3. Upload your CorticalMeasuresENIGMA_ThickAvg.csv file",
            '#description' =>
                'SubjID must match those in covariates.csv and there must be be no empty cell. Max file size is ' .
                $max_file_size . ' bytes.',
            '#progress_indicator' => "bar",
            //'#required' => TRUE,
            '#type' => "managed_file",
            '#upload_location' => $EBD_PRIVATE_URI_PREFIX . $user->uid . "/" .
                $timestamp . "/",
            '#upload_validators' => array (
                "file_validate_extensions" => array ( "csv" ),
                'file_validate_size' => array ( $max_file_size ) ),
            '#process' => array ( 'ebd_file_element_process' ),
        );

        if ( isset ( $upload_info['thickavg']['file']->fid ) )
            $form['thickavg_file']['#default_value'] =
                $upload_info['thickavg']['file']->fid;
    }

    else if ( $step === $EBD_UPLOAD_STEPS[4] )
    {
        drupal_set_message
            ( 'CorticalMeasuresENIGMA_ThickAvg.csv file successfully validated' );

        $form["volumes_file"] = array (
            '#title' =>
                "Step 4. Upload your LandRvolumes.csv file",
            '#description' =>
                'SubjID must match those in covariates.csv and there must be be no empty cell. Max file size is ' .
                $max_file_size . ' bytes.',
            '#progress_indicator' => "bar",
            //'#required' => TRUE,
            '#type' => "managed_file",
            '#upload_location' => $EBD_PRIVATE_URI_PREFIX . $user->uid . "/" .
                $timestamp . "/",
            '#upload_validators' => array (
                "file_validate_extensions" => array ( "csv" ),
                'file_validate_size' => array ( $max_file_size ) ),
            '#process' => array ( 'ebd_file_element_process' ),
        );

        if ( isset ( $upload_info['volumes']['file']->fid ) )
            $form['volumes_file']['#default_value'] =
                $upload_info['volumes']['file']->fid;
    }

    $form['prev'] = array ( '#type' => 'submit',
        '#value' => t ( $EBD_UPLOAD_PREVIOUS_BUTTON ) );

    $form['bypass'] = array ( '#type' => 'hidden', '#value' => 0 );
    $form['next'] = array (
        '#type' => 'submit',
        '#value' => t ( $EBD_UPLOAD_NEXT_BUTTON ),
        '#states' => array (
            'visible' =>
                array ( ':input[name="bypass"]' => array ( 'value' => '0' ) ) ),
    );
    $form['proceed'] = array (
        '#type' => 'submit',
        '#value' => t ( $EBD_UPLOAD_PROCEED_BUTTON ),
        '#states' => array (
            'visible' =>
                array ( ':input[name="bypass"]' => array ( 'value' => '1' ) ) ),
    );

    $form['cancel'] = array ( '#type' => 'submit', '#value' => t ( 'Cancel' ) );

    if ( $step === $EBD_UPLOAD_STEPS[1] )
    {
        $form['prev']['#disabled'] = TRUE;
        $form['cancel']['#disabled'] = TRUE;
    }
    //fwrite ( $debug, "form : " . print_r ( $form, TRUE ) . "\n" );

    return ( $form );
}


/**
 * Implmented hook_submit
 **/
function ebd_upload_multipage_form_submit ( $form, &$form_state )
{
    global $EBD_DEBUG_FILE;
    global $EBD_LOGOUT_URL;
    global $EBD_UPLOAD_INFO;
    global $EBD_UPLOAD_STEPS;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_upload_multipage_form_submit\n" );
    $upload_info = $form_state[$EBD_UPLOAD_INFO];
    //fwrite ( $debug, "upload_info : " . print_r ( $upload_info, TRUE ) . "\n" );
    $values = $form_state['values'];
    //fwrite ( $debug, "values : " . print_r ( $values, TRUE ) . "\n" );

    if ( $values['op'] === "Cancel" )
    {
        drupal_set_message
            ( "You've cancelled the upload and your files have been deleted.",
            "warning" );
        $form_state['rebuild'] = FALSE;
        $form_state['redirect'] = "agreement";
    }

    else if ( $upload_info['step'] === $EBD_UPLOAD_STEPS[5] )
    {
        $form_state['rebuild'] = FALSE;
        $form_state['redirect'] = "node/14";
        //fwrite ( $debug, "upload_info : " . print_r ( $upload_info, TRUE ) . "\n" );

        if ( ebd_upload_save ( $upload_info ) === FALSE )
            drupal_set_message
                ( 'Error in saving upload!  Please notify administrator.',
                'error' );
        else
            drupal_set_message
                ( "Your upload has been successfully saved.  Thank you!  You may now " .
                l ( "logout", $EBD_LOGOUT_URL ) . "." );
    }

    else
        $form_state['rebuild'] = TRUE;
    //fwrite ( $debug, "form_state rebuild : " . print_r ( $form_state['rebuild'], TRUE ) . "\n" );
}


/**
 * Validate the multi-page user upload forms
 **/
function ebd_upload_multipage_form_validate ( $form, &$form_state )
{
    global $EBD_DEBUG_FILE;
    global $EBD_PRIVATE_URI_PREFIX;
    global $EBD_UPLOAD_INFO;
    global $EBD_UPLOAD_NEXT_BUTTON;
    global $EBD_UPLOAD_PREVIOUS_BUTTON;
    global $EBD_UPLOAD_PROCEED_BUTTON;
    global $EBD_UPLOAD_STEPS;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_upload_multipage_form_validate\n" );
    //fwrite ( $debug, "form_state : " . print_r ( $form_state, TRUE ) . "\n" );

    drupal_get_messages();

    $file = NULL;
    $upload_info = array();
    $values = $form_state['values'];
    //fwrite ( $debug, "values : " . print_r ( $values, TRUE ) . "\n" );

    if ( ! empty ( $form_state[$EBD_UPLOAD_INFO] ) )
        $upload_info = $form_state[$EBD_UPLOAD_INFO];
    //fwrite ( $debug, "upload_info : " . print_r ( $upload_info, TRUE ) . "\n" );

    if ( empty ( $upload_info['step'] ) ||
        $upload_info['step'] == $EBD_UPLOAD_STEPS[1] )
    {
        $upload_info['timestamp'] = $values['timestamp'];

        if ( isset ( $values['usc_upload_for'] ) )
            $upload_info['usc_upload_for'] = $values['usc_upload_for'];

        /* Not needed since first file is set to be required...
        if ( empty ( $values['covariates_file'] ) )
        {
            form_set_error ( "Upload file missing!" );
            return;
        }
        */

        $file = file_load ( $values['covariates_file'] );
        //fwrite ( $debug, "file : " . print_r ( $file, TRUE ) . "\n" );

        if ( $file !== FALSE )
        {
            $result = ebd_covariates_check ( $file );
            //fwrite ( $debug, "result : " . print_r ( $result, TRUE ) . "\n" );

            if ( $result == NULL )
                form_set_error ( "covariates_file",
                    "Error in covariates.csv!  Please fix and try again..." );
            else
            {
                $upload_info['covariates'] = array ( "file" => $file,
                    "entries" => $result['entries'],
                    "subjects" => $result['subjects'],
                    "sites" => $result['sites'] );
                $upload_info['step'] = $EBD_UPLOAD_STEPS[2];
            }
        }
    }

    else if ( $upload_info['step'] == $EBD_UPLOAD_STEPS[2] )
    {
        //fwrite ( $debug, "file : " . print_r ( $values['surfavg_file'], TRUE ) . "\n" );

        if ( $values['op'] === $EBD_UPLOAD_PREVIOUS_BUTTON )
            $upload_info['step'] = $EBD_UPLOAD_STEPS[1];

        else if ( $values['op'] === $EBD_UPLOAD_NEXT_BUTTON )
        {
            if ( empty ( $values['surfavg_file'] ) )
            {
                form_set_error ( "surfavg_file", "Upload file missing!" );
                return;
            }

            $file = file_load ( $values['surfavg_file'] );
            //fwrite ( $debug, "file : " . print_r ( $file, TRUE ) . "\n" );

            $result = ebd_upload_check ( $upload_info, $file );
            //fwrite ( $debug, "ebd_upload_check : " . print_r ( $result, TRUE ) . "\n" );

            if ( $result === 0 )
            {
                $upload_info['surfavg'] = array ( "file" => $file );
                $upload_info['step'] = $EBD_UPLOAD_STEPS[3];
            }
            else if ( $result === 1 )
            {
                $upload_info['surfavg'] = array ( "file" => $file );
                $form_state['complete form']['bypass']['#value'] = 1;
                form_set_error ( "surfavg_file",
                    'If the missing subject is intentional (perhaps because of unsalvageable data for one type of imaging data, but adequate data for other types), please click on the "Proceed with upload anyway" button below. If this is in error, please reconcile the subject numbers in all of your files before uploading.' );
            }
            else if ( $result === 2 )
                form_set_error ( "surfavg_file",
                    "Please fix the above error(s) in your CorticalMeasuresENIGMA_SurfAvg.csv file and try again..." );
        }

        else if ( $values['op'] === $EBD_UPLOAD_PROCEED_BUTTON )
        {
            if ( empty ( $values['surfavg_file'] ) )
            {
                form_set_error ( "surfavg_file", "Upload file missing!" );
                return;
            }
            else
                $upload_info['step'] = $EBD_UPLOAD_STEPS[3];
        }
    }

    else if ( $upload_info['step'] == $EBD_UPLOAD_STEPS[3] )
    {
        if ( $values['op'] === $EBD_UPLOAD_PREVIOUS_BUTTON )
            $upload_info['step'] = $EBD_UPLOAD_STEPS[2];

        else if ( $values['op'] === $EBD_UPLOAD_NEXT_BUTTON )
        {
            if ( empty ( $values['thickavg_file'] ) )
            {
                form_set_error ( "thickavg_file", "Upload file missing!" );
                return;
            }

            $file = file_load ( $values['thickavg_file'] );
            //fwrite ( $debug, "thickavg_file : " . print_r ( $file, TRUE ) . "\n" );

            $result = ebd_upload_check ( $upload_info, $file );
            //fwrite ( $debug, "result : " . print_r ( $result, TRUE ) . "\n" );

            if ( $result === 0 )
            {
                $upload_info['thickavg'] = array ( "file" => $file );
                $upload_info['step'] = $EBD_UPLOAD_STEPS[4];
            }
            else if ( $result === 1 )
            {
                $form_state['complete form']['bypass']['#value'] = 1;
                $upload_info['thickavg'] = array ( "file" => $file );
                form_set_error ( "thickavg_file",
                    'If the missing subject is intentional (perhaps because of unsalvageable data for one type of imaging data, but adequate data for other types), please click on the "Proceed with upload anyway" button below. If this is in error, please reconcile the subject numbers in all of your files before uploading.' );
            }
            else if ( $result === 2 )
                form_set_error ( "thickavg_file",
                    "Please fix the above error(s) in your CorticalMeasuresENIGMA_ThickAvg.csv file and try again..." );
        }

        else if ( $values['op'] === $EBD_UPLOAD_PROCEED_BUTTON )
        {
            if ( empty ( $values['surfavg_file'] ) )
            {
                form_set_error ( "surfavg_file", "Upload file missing!" );
                return;
            }
            else
                $upload_info['step'] = $EBD_UPLOAD_STEPS[4];
        }
    }

    else if ( $upload_info['step'] == $EBD_UPLOAD_STEPS[4] )
    {
        if ( $values['op'] === $EBD_UPLOAD_PREVIOUS_BUTTON )
            $upload_info['step'] = $EBD_UPLOAD_STEPS[3];

        else if ( $values['op'] === $EBD_UPLOAD_NEXT_BUTTON )
        {
            if ( empty ( $values['volumes_file'] ) )
            {
                form_set_error ( "volumes_file", "Upload file missing!" );
                return;
            }

            $file = file_load ( $values['volumes_file'] );
            //fwrite ( $debug, "file : " . print_r ( $file, TRUE ) . "\n" );

            $result = ebd_upload_check ( $upload_info, $file );
            //fwrite ( $debug, "result : " . print_r ( $result, TRUE ) . "\n" );

            if ( $result === 0 )
            {
                $upload_info['volumes'] = array ( "file" => $file );
                $upload_info['step'] = $EBD_UPLOAD_STEPS[5];
            }
            else if ( $result === 1 )
            {
                $upload_info['volumes'] = array ( "file" => $file );
                $form_state['complete form']['bypass']['#value'] = 1;
                form_set_error ( "volumes_file",
                    'If the missing subject is intentional (perhaps because of unsalvageable data for one type of imaging data, but adequate data for other types), please click on the "Proceed with upload anyway" button below. If this is in error, please reconcile the subject numbers in all of your files before uploading.' );
            }
            else if ( $result === 2 )
                form_set_error ( "volumes_file",
                    "Please fix the above error(s) in your LandRvolumes.csv file and try again..." );
        }

        else if ( $values['op'] === $EBD_UPLOAD_PROCEED_BUTTON )
        {
            if ( empty ( $values['surfavg_file'] ) )
            {
                form_set_error ( "surfavg_file", "Upload file missing!" );
                return;
            }
            else
                $upload_info['step'] = $EBD_UPLOAD_STEPS[5];
        }
    }
    //fwrite ( $debug, "new upload_info : " . print_r ( $upload_info, TRUE ) . "\n" );

    $form_state[$EBD_UPLOAD_INFO] = $upload_info;
}


function ebd_upload_save ( $info )
{
    global $user;
    global $EBD_DEBUG_FILE;

    //$debug = fopen ( $EBD_DEBUG_FILE, "a" );
    //fwrite ( $debug, "entered ebd_upload_save\n" );
    //fwrite ( $debug, "info : " . print_r ( $info, TRUE ) . "\n" );

    $user = user_load ( $user->uid );

    // Make sure 4 files are present
    if ( ! isset ( $info['covariates']['file']->fid ) ||
        empty ( $info['covariates']['file']->fid ) ||
        ! isset ( $info['surfavg']['file']->fid ) ||
        empty ( $info['surfavg']['file']->fid ) ||
        ! isset ( $info['thickavg']['file']->fid ) ||
        empty ( $info['thickavg']['file']->fid ) ||
        ! isset ( $info['volumes']['file']->fid ) ||
        empty ( $info['volumes']['file']->fid ) )
        return ( FALSE );
   
    // Must set file's display or else PDOException when saving node
    $info['covariates']['file']->display = 1;
    $info['surfavg']['file']->display = 1;
    $info['thickavg']['file']->display = 1;
    $info['volumes']['file']->display = 1;

    // Gather data stats
    $age_max = 0;
    $age_min = 1000;
    $age_total = 0;
    $num_females = 0;
    $num_males = 0;
    $num_sites = count ( $info['covariates']['sites'] );
    $num_subjects = count ( $info['covariates']['subjects'] );

    foreach ( $info['covariates']['entries'] as $entry )
    {
        $age_total += $entry['age'];

        if ( $entry['age'] > $age_max )
            $age_max = $entry['age'];
        else if ( $entry['age'] < $age_min )
            $age_min = $entry['age'];

        if ( $entry['gender'] == '1' )
            $num_males++;
        else if ( $entry['gender'] == '2' )
            $num_females++;
    }
    $age_mean = $age_total / $num_subjects;
    //fwrite ( $debug, "age_min : " . print_r ( $age_min, TRUE ) . "\n" );
    //fwrite ( $debug, "age_mean : " . print_r ( $age_mean, TRUE ) . "\n" );
    //fwrite ( $debug, "age_max : " . print_r ( $age_max, TRUE ) . "\n" );
    //fwrite ( $debug, "age_total : " . print_r ( $age_total, TRUE ) . "\n" );
    //fwrite ( $debug, "num_males : " . print_r ( $num_males, TRUE ) . "\n" );
    //fwrite ( $debug, "num_females : " . print_r ( $num_females, TRUE ) . "\n" );
    //fwrite ( $debug, "num_sites : " . print_r ( $num_sites, TRUE ) . "\n" );
    //fwrite ( $debug, "num_subjects : " . print_r ( $num_subjects, TRUE ) . "\n" );

    // Create the update node
    $node = new stdClass();
    $node->uid = $user->uid;
    $node->type = "uploads";
    //$node->title = $info['timestamp'];
    //$node->title = $user->uid;
    $node->is_new = TRUE;
    $node->status = 1;
    $node->field_upload_covariates_file = array ( LANGUAGE_NONE => array (
        ( array ) $info['covariates']['file'] ) );
    $node->field_upload_surface_file = array ( LANGUAGE_NONE => array (
        ( array ) $info['surfavg']['file'] ) );
    $node->field_upload_thickness_file = array ( LANGUAGE_NONE => array (
        ( array ) $info['thickavg']['file'] ) );
    $node->field_upload_volumes_file = array ( LANGUAGE_NONE => array (
            ( array ) $info['volumes']['file'] ) );
    $node->field_upload_num_subjects = array ( LANGUAGE_NONE => array (
        array ( 'value' => $num_subjects ) ) );
    $node->field_upload_num_sites = array ( LANGUAGE_NONE => array (
        array ( 'value' => $num_sites ) ) );
    $node->field_upload_age_minf = array ( LANGUAGE_NONE => array (
        array ( 'value' => $age_min ) ) );
    $node->field_upload_age_mean = array ( LANGUAGE_NONE => array (
        array ( 'value' => $age_mean ) ) );
    $node->field_upload_age_maxf = array ( LANGUAGE_NONE => array (
        array ( 'value' => $age_max ) ) );
    $node->field_upload_num_male_subjects = array ( LANGUAGE_NONE => array (
        array ( 'value' => $num_males ) ) );
    $node->field_upload_num_female_subjects = array ( LANGUAGE_NONE => array (
        array ( 'value' => $num_females ) ) );

    if ( isset ( $info['usc_upload_for'] ) )
    {
        $userx = user_load ( $info['usc_upload_for'] );
        $node->title = $userx->field_user_pi[LANGUAGE_NONE][0]['value'];
        $node->field_upload_uploaded_for_user = ebd_user_reference_field_create
            ( $info['usc_upload_for'] );
    }
    else
    {
        //fwrite ( $debug, "user : " . print_r ( $user, TRUE ) . "\n" );
        $node->title = $user->field_user_pi[LANGUAGE_NONE][0]['value'];
        $node->field_upload_uploaded_for_user =
            ebd_user_reference_field_create ( $user->uid );
    }
    //fwrite ( $debug, "new upload node : " . print_r ( $node, TRUE ) . "\n" );

    node_save ( $node );

    // If there is a usc_upload_for, we need to update agreements for that
    // user
    if ( isset ( $info['usc_upload_for'] ) )
    {
        $agreements = ebd_get_agreements_by_uid ( $info['usc_upload_for'] );
        //fwrite ( $debug, "agreements : " . print_r ( $agreements, TRUE ) . "\n" );
        foreach ( $agreements as $agreement )
        {
            if ( isset (
                $agreement->field_agreements_usc[LANGUAGE_NONE][0]['value'] ) &&
                ( $agreement->field_agreements_usc[LANGUAGE_NONE][0]['value']
                === "2" ) )
            {
                //fwrite ( $debug, "updating agreement : " . print_r ( $agreement, TRUE ) . "\n" );
                $agreement->field_agreements_uploaded =
                    ebd_value_field_create ( 1 );
                node_save ( $agreement );
                //fwrite ( $debug, "saved agreement : " . print_r ( $agreement, TRUE ) . "\n" );
            }
        }
    }

    return ( $node );
}


/**
 * Create the array for the given value which can be used to set a node
 * object's field
 * @param value - a value to set
 * @return FALSE if argument is empty; otherwise returns
 *      array ( LANGUAGE_NONE => array ( array ( 'value' => $value ) ) )
 **/
function ebd_value_field_create ( $value )
{
    // Do not use empty to test as 0 will fail
    if ( isset ( $value ) )
      return ( array ( LANGUAGE_NONE =>
          array ( array ( 'value' => $value ) ) ) );
    else
        return FALSE;
}


/**
 * Create the array for the given user ID which can be used to set a node
 * object's user reference field
 * @param uid - a user ID to set
 * @return FALSE if argument is empty; otherwise returns
 *      array ( LANGUAGE_NONE => array ( array ( 'uid' => $uid ) ) )
 **/
function ebd_user_reference_field_create ( $uid )
{
    // Do not use empty to test as 0 will fail
    if ( isset ( $uid ) )
      return ( array ( LANGUAGE_NONE =>
          array ( array ( 'uid' => $uid ) ) ) );
    else
        return FALSE;
}


